source("base3-echange.Rdata");

##### Definition de la grille
# Grille d'estimation de la densité de probabilité en 50 intervalles selon 1er attribut
xp1<-seq(min(x_test[,1]),max(x_test[,1]),length=50) 
# Grille d'estimation de la densité de probabilité en 50 intervalles selon 2eme attribut
xp2<-seq(min(x_test[,2]),max(x_test[,2]),length=50)
grille<-expand.grid(x1=xp1,x2=xp2)


##### Algo discriminant
x_app.qda<- qda(x_app,classe_app)
Zp<-predict(x_app.qda, grille)
assigne_test<-predict(x_app.qda, newdata=x_test)
# Estimation des taux de bonnes classifications
table_classification_test <-table(classe_test, assigne_test$class)
# table of correct class vs. classification
diag(prop.table(table_classification_test, 1))
# total percent correct
taux_bonne_classif_test <-sum(diag(prop.table(table_classification_test)))


##### Formes pour classe test
# forme de la classe test 1
shape<-rep(1,n_test) ;
# forme de la classe test 2
shape[assigne_test$class==2]=2 ;
# forme de la classe test 3
shape[assigne_test$class==3]=3 ;


##### Couleur pour classe app
# couleur de la classe app 1
couleur<-rep('red',n_app);
# couleur de la classe app 2
couleur[classe_app==2]='blue';
# couleur de la classe app 3
couleur[classe_app==3]='green';

##### affichage du resultat
plot(x_test,col=couleur,pch=shape,xlab = "X1", ylab = "X2")

##### Ajout du contour
xp1<-seq(min(x_app[,1]),max(x_app[,1]),length=50)
xp2<-seq(min(x_app[,2]),max(x_app[,2]),length=50)

grille<-expand.grid(x1=xp1,x2=xp2)
grille=cbind(grille[,1],grille[,2])

Zp<-predict(x_app.qda,grille)
zp<-Zp$post[,3]-pmax(Zp$post[,2],Zp$post[,1])

contour(xp1,xp2,matrix(zp,50),add=TRUE,levels=0,drawlabels=FALSE)
